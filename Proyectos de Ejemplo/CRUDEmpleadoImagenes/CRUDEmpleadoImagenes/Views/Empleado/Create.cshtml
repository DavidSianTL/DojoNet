@model CRUDEmpleadoImagenes.Models.Empleado

@{
    ViewData["Title"] = "Crear Empleado";
}

<h2>@ViewData["Title"]</h2>

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}

<form asp-action="Create" enctype="multipart/form-data" method="post">
    <div class="form-group">
        <label asp-for="Nombre"></label>
        <input asp-for="Nombre" class="form-control" />
        <span asp-validation-for="Nombre" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Cargo"></label>
        <input asp-for="Cargo" class="form-control" />
        <span asp-validation-for="Cargo" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label>Foto (máx. 6x4 cm)</label>
        <input type="file" name="FotoArchivo" class="form-control" accept="image/*"
               onchange="validarImagen(this, 378, 378, 'Foto')" />
    </div>

    <div class="form-group">
        <label>Firma (máx. 6x3 cm)</label>
        <input type="file" name="FirmaArchivo" class="form-control" accept="image/*"
               onchange="validarImagen(this, 378, 378, 'Firma')" />
    </div>

    <div class="form-group">
        <label>Documento PDF</label>
        <input type="file" name="PDFArchivo" class="form-control" accept="application/pdf" />
    </div>

    <br />
    <button type="submit" class="btn btn-primary">Guardar</button>
    <a asp-action="Index" class="btn btn-secondary">Cancelar</a>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        function validarImagen(input, anchoEsperado, altoEsperado, nombreCampo) {
            const pesoMaximoKB = 500; // Límite de peso en KB

            if (input.files && input.files[0]) {
                if (input.files[0].size > pesoMaximoKB * 1024) {
                    alert(`El archivo de ${nombreCampo} supera los ${pesoMaximoKB} KB permitidos.`);
                    input.value = "";
                    return;
                }

                const img = new Image();
                const reader = new FileReader();

                reader.onload = function (e) {
                    img.src = e.target.result;
                };

                img.onload = function () {
                    const ancho = img.width;
                    const alto = img.height;

                    if (ancho > anchoEsperado || alto > altoEsperado) {
                        alert(`La imagen de ${nombreCampo} debe medir máximo ${anchoEsperado}px x ${altoEsperado}px (≈ ${Math.round(anchoEsperado / 37.8)}cm x ${Math.round(altoEsperado / 37.8)}cm).`);
                        input.value = "";
                    }
                };

                reader.readAsDataURL(input.files[0]);
            }
        }
    </script>
}