@model IEnumerable<ProyectoDojoGeko.Models.SistemasEmpresa.SistemasEmpresaFormViewModel>
@{
    ViewData["Title"] = "Gestion de Asignación de Sistemas a Empresa - GEKO Sistemas de Seguridad";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

<div class="empleados-container">
    <!-- Header de la pagina -->
    <div class="page-header">
        <div class="header-content">
            <h1 class="page-title">
                <i class="fas fa-handshake-angle"></i>
                Asignación de Sistemas a Empresas
            </h1>
            <p class="page-subtitle">
                Administra la informacion de las relaciones registradas
            </p>
        </div>
        <div class="header-actions">
            <div class="search-container">
                <i class="fas fa-search"></i>
                <input type="text" id="searchInput" placeholder="Buscar relación..." class="search-input">
            </div>
            <a href="@Url.Action("Crear", "SistemasEmpresa")" class="btn-create">
                <i class="fas fa-plus"></i>
                <span>Nueva relación</span>
            </a>
        </div>
    </div>

    <!-- Filtros y estadisticas -->
    <div class="filters-stats">

        <div class="stats-cards">
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-clipboard"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number" id="totalEmpresasSitemas">@Model.Count()</div>
                    <div class="stat-label">Total Relaciones</div>
                </div>
            </div>
        </div>

    </div>

    <!-- Tabla de empleados -->
    <div class="table-container">
        <table class="empleados-table" id="empleadosTable">
            <thead>
                <tr>
                    <th class="sortable" data-sort="id">ID Relación <i class="fas fa-sort"></i></th>
                    <th class="sortable" data-sort="empresa">Empresa <i class="fas fa-sort"></i></th>
                    <th class="sortable" data-sort="sistema">Sistema <i class="fas fa-sort"></i></th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.Any())
                {
                    foreach (var item in Model)
                    {
                        var nombreEmpresa = item.Empresas.FirstOrDefault(e => e.Value == item.SistemasEmpresa.FK_IdEmpresa.ToString())?.Text ?? "Desconocida";
                        var nombresSistemas = string.Join(", ",
                        item.Sistemas.Where(s => item.FK_IdsSistema.Contains(int.Parse(s.Value))).Select(s => s.Text));

                        <tr>
                            <td>@item.SistemasEmpresa.IdSistemasEmpresa</td>
                            <td>@nombreEmpresa</td>
                            <td>@nombresSistemas</td>
                            <td class="actions-cell">
                                <div class="actions-container">
                                    <a href="@Url.Action("Editar", "SistemasEmpresa", new { id = item.SistemasEmpresa.IdSistemasEmpresa })" class="btn-action edit" title="Editar">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <button type="button"
                                            class="btn-action delete"
                                            data-id="@item.SistemasEmpresa.IdSistemasEmpresa"
                                            data-nombre="@nombreEmpresa"
                                            title="Eliminar">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4" class="no-data">
                            <div class="no-data-message">
                                <i class="fas fa-users-slash"></i>
                                <p>No hay relaciones registradas en el sistema</p>
                                <a href="@Url.Action("Crear", "SistemasEmpresa")" class="btn-create-empty">
                                    <i class="fas fa-handshake-angle"></i>
                                    Agregar Relación
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Paginacion -->
    <div class="pagination-container">
        <div class="pagination-info">
            Mostrando <span id="showing-start">1</span> a <span id="showing-end">@Model.Count()</span> de <span id="total-items">@Model.Count()</span> relaciones
        </div>
        <div class="pagination-controls">
            <button id="prev-page" class="pagination-btn" disabled>
                <i class="fas fa-chevron-left"></i>
                Anterior
            </button>
            <div class="pagination-pages" id="pagination-pages">
                <button class="page-btn active">1</button>
            </div>
            <button id="next-page" class="pagination-btn" disabled>
                Siguiente
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>
</div>

<!-- Modal de eliminación -->
<!-- Modal Eliminar Empresa -->
<div id="modalEliminarEmpresa" class="modal-custom">
    <div class="modal-content-custom">
        <button id="cerrarModal" class="modal-close-custom" title="Cerrar">&times;</button>
        <h3>Desactivar Empresa</h3>
        <p>¿Estás seguro que deseas desactivar la empresa <strong id="nombreEmpresaEliminar"></strong>?</p>
        <form id="formEliminarEmpresa" method="post">
            <button type="button" id="cancelarEliminar" class="btn btn-secondary">Cancelar</button>
            <button type="submit" class="btn btn-danger">Sí, desactivar</button>
        </form>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/empleados.css" />
}

<script src="~/js/Empresas.js"></script>

<script>


      document.addEventListener('DOMContentLoaded', function () {
        const estadoFilter = document.getElementById('estadoFilter');
        const resetBtn = document.getElementById('resetFilters');
        const searchInput = document.getElementById('searchInput');
        const tableRows = document.querySelectorAll('#empresasTable tbody tr');

        // Función para aplicar filtros combinados (estado + búsqueda)
        function filtrarEmpresas() {
            const filtroEstado = estadoFilter.value;
            const textoBusqueda = searchInput.value.toLowerCase();

            tableRows.forEach(row => {
                const estado = row.getAttribute('data-estado'); // activo o inactivo
                const contenido = row.textContent.toLowerCase();

                const coincideEstado =
                    filtroEstado === 'todos' ||
                    (filtroEstado === 'activos' && estado === 'activo') ||
                    (filtroEstado === 'inactivos' && estado === 'inactivo');

                const coincideBusqueda = contenido.includes(textoBusqueda);

                if (coincideEstado && coincideBusqueda) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        // Filtro por estado
        estadoFilter.addEventListener('change', filtrarEmpresas);

        // Filtro por texto
        searchInput.addEventListener('input', filtrarEmpresas);

        // Botón para reiniciar filtros
        resetBtn.addEventListener('click', function () {
            estadoFilter.value = 'todos';
            searchInput.value = '';
            filtrarEmpresas();
        });
    });
    // Abrir modal y llenar datos
    document.querySelectorAll('.btn-action.delete').forEach(button => {
      button.addEventListener('click', () => {
        const empresaId = button.getAttribute('data-id');
        const empresaNombre = button.getAttribute('data-nombre');
        document.getElementById('nombreEmpresaEliminar').textContent = empresaNombre;
        document.getElementById('formEliminarEmpresa').action = `/Empresas/Eliminar/${empresaId}`;
        document.getElementById('modalEliminarEmpresa').style.display = 'flex';
      });
    });

    // Cerrar modal
    document.getElementById('cerrarModal').addEventListener('click', () => {
      document.getElementById('modalEliminarEmpresa').style.display = 'none';
    });
    document.getElementById('cancelarEliminar').addEventListener('click', () => {
      document.getElementById('modalEliminarEmpresa').style.display = 'none';
    });

    // Cerrar modal al hacer click fuera del contenido
    window.addEventListener('click', (e) => {
      const modal = document.getElementById('modalEliminarEmpresa');
      if (e.target === modal) {
        modal.style.display = 'none';
      }
    });


        document.getElementById('searchInput').addEventListener('input', function () {
        const filter = this.value.toLowerCase();
        const rows = document.querySelectorAll('#empresasTable tbody tr');

        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            if (text.includes(filter)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    });
</script>