@model IEnumerable<ProyectoDojoGeko.Models.SistemaViewModel>
@{
    ViewData["Title"] = "Gestión de Sistemas - GEKO Sistemas de Seguridad";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

<!-- CSS específico para empresas -->
<link rel="stylesheet" href="~/css/sistemas.css" />

<div class="sistemas-container">
    <!-- Header -->
    <div class="page-header">
        <div class="header-content">
            <h1 class="page-title">
                <i class="fas fa-server"></i>
                Gestión de Sistemas
            </h1>
            <p class="page-subtitle">
                Administra toda la información de los sistemas registrados
            </p>
        </div>
        <div class="header-actions">
            <div class="search-container">
                <i class="fas fa-search"></i>
                <input type="text" id="searchInput" placeholder="Buscar sistemas..." class="search-input">
            </div>
            <a href="@Url.Action("Crear", "Sistemas")" class="btn-create-empty">
                <i class="fas fa-plus"></i>
                <span>Nuevo Sistema</span>
            </a>
        </div>
    </div>

    <!-- Estadísticas -->
    <div class="filters-stats">
        <div class="stats-cards">
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-server"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@Model.Count()</div>
                    <div class="stat-label">Total Sistemas</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon active">
                    <i class="fas fa-toggle-on"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@Model.Count(e => e.Estado)</div>
                    <div class="stat-label">Sistemas Activos</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon inactive">
                    <i class="fas fa-toggle-off"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@Model.Count(e => !e.Estado)</div>
                    <div class="stat-label">Sistemas Inactivos</div>
                </div>
            </div>
        </div>

        <!-- Filtros -->
        <div class="filters">
            <div class="filter-group">
                <label for="estadoFilter">Estado:</label>
                <select id="estadoFilter" class="filter-select">
                    <option value="todos">Todos</option>
                    <option value="activos">Activos</option>
                    <option value="inactivos">Inactivos</option>
                </select>
            </div>
            <button id="resetFilters" class="btn-reset-filters">
                <i class="fas fa-sync-alt"></i>
                Reiniciar Filtros
            </button>
        </div>
    </div>

    <!-- Tabla -->
    <div class="table-container">
        <table class="sistemas-table" id="sistemasTable">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                    <th>Descripción</th>
                    <th>Código</th>
                    <th>Fecha de Creación</th>
                    <th>Estado</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.Any())
                {
                    foreach (var sistema in Model)
                    {
                        <tr class="@(sistema.Estado ? "" : "inactive-row")" data-estado="@(sistema.Estado ? "activo" : "inactivo")">
                            <td>@sistema.IdSistema</td>
                            <td>@sistema.Nombre</td>
                            <td>@sistema.Descripcion</td>
                            <td>@sistema.Codigo</td>
                            <td>@sistema.FechaCreacion.ToString("dd/MM/yyyy")</td>
                            <td>
                                <span class="estado-badge @(sistema.Estado ? "activo" : "inactivo")">
                                    @(sistema.Estado ? "Activo" : "Inactivo")
                                </span>
                            </td>
                            <td class="actions-cell">
                                <div class="actions-container">
                                    <a href="@Url.Action("EDITAR", "Sistemas", new { id = sistema.IdSistema})" class="btn-action edit" title="Editar">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <button type="button"
                                            class="btn-action delete"
                                            data-id="@sistema.IdSistema"
                                            data-nombre="@sistema.Nombre"
                                            title="Eliminar">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7" class="no-data">
                            <div class="no-data-message">
                                <i class="fas fa-building-slash"></i>
                                <p>No hay sistemas registrados</p>
                                <a href="@Url.Action("AgregarSistema", "Sistema")" class="btn-create-empty">
                                    <i class="fas fa-plus"></i>
                                    Agregar Sistema
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Paginación -->
    <div class="pagination-container">
        <div class="pagination-info">
            Mostrando <span id="showing-start">1</span> a <span id="showing-end">@Model.Count()</span> de <span id="total-items">@Model.Count()</span> sistemas
        </div>
        <div class="pagination-controls">
            <button id="prev-page" class="pagination-btn" disabled>
                <i class="fas fa-chevron-left"></i>
                Anterior
            </button>
            <div class="pagination-pages" id="pagination-pages">
                <button class="page-btn active">1</button>
            </div>
            <button id="next-page" class="pagination-btn" disabled>
                Siguiente
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>
</div>

<!-- Modal Eliminar Sistemas -->
<div id="modalEliminarSistema" class="modal-custom">
    <div class="modal-content-custom">
        <button id="cerrarModal" class="modal-close-custom" title="Cerrar">&times;</button>
        <h3>Desactivar Sistema</h3>
        <p>¿Estás seguro que deseas desactivar la sistema <strong id="nombreSistemaEliminar"></strong>?</p>
        <form id="formEliminarSistema" method="post">
            <button type="button" id="cancelarEliminar" class="btn btn-secondary">Cancelar</button>
            <button type="submit" class="btn btn-danger">Sí, desactivar</button>
        </form>
    </div>
</div>

<!-- Script JS -->
<script src="~/js/sistemas.js"></script>
<script>


      document.addEventListener('DOMContentLoaded', function () {
        const estadoFilter = document.getElementById('estadoFilter');
        const resetBtn = document.getElementById('resetFilters');
        const searchInput = document.getElementById('searchInput');
        const tableRows = document.querySelectorAll('#sistemasTable tbody tr');

        // Función para aplicar filtros combinados (estado + búsqueda)
        function filtrarSistemas() {
            const filtroEstado = estadoFilter.value;
            const textoBusqueda = searchInput.value.toLowerCase();

            tableRows.forEach(row => {
                const estado = row.getAttribute('data-estado'); // activo o inactivo
                const contenido = row.textContent.toLowerCase();

                const coincideEstado =
                    filtroEstado === 'todos' ||
                    (filtroEstado === 'activos' && estado === 'activo') ||
                    (filtroEstado === 'inactivos' && estado === 'inactivo');

                const coincideBusqueda = contenido.includes(textoBusqueda);

                if (coincideEstado && coincideBusqueda) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        // Filtro por estado
        estadoFilter.addEventListener('change', filtrarSistemas);

        // Filtro por texto
        searchInput.addEventListener('input', filtrarSistemas);

        // Botón para reiniciar filtros
        resetBtn.addEventListener('click', function () {
            estadoFilter.value = 'todos';
            searchInput.value = '';
            filtrarSistemas();
        });
    });
    // Abrir modal y llenar datos
    document.querySelectorAll('.btn-action.delete').forEach(button => {
      button.addEventListener('click', () => {
        const sistemaId = button.getAttribute('data-id');
        const sistemaNombre = button.getAttribute('data-nombre');
        document.getElementById('nombreSistemaEliminar').textContent = sistemaNombre;
        document.getElementById('formEliminarSistema').action = `/Sistemas/Eliminar/${sistemaId}`;
        document.getElementById('modalEliminarSistema').style.display = 'flex';
      });
    });

    // Cerrar modal
    document.getElementById('cerrarModal').addEventListener('click', () => {
      document.getElementById('modalEliminarSistema').style.display = 'none';
    });
    document.getElementById('cancelarEliminar').addEventListener('click', () => {
      document.getElementById('modalEliminarSistema').style.display = 'none';
    });

    // Cerrar modal al hacer click fuera del contenido
    window.addEventListener('click', (e) => {
      const modal = document.getElementById('modalEliminarSistema');
      if (e.target === modal) {
        modal.style.display = 'none';
      }
    });


        document.getElementById('searchInput').addEventListener('input', function () {
        const filter = this.value.toLowerCase();
        const rows = document.querySelectorAll('#sistemasTable tbody tr');

        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            if (text.includes(filter)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    });
</script>