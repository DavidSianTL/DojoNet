@{
    ViewBag.Title = "RolPermisos - En Construcción";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .config-body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
        margin: 0;
        padding: 0;
    }

    .container {
        text-align: center;
        color: white;
        max-width: 600px;
        padding: 2rem;
        position: relative;
        z-index: 2;
    }

    .construction-icon {
        font-size: 5rem;
        margin-bottom: 1rem;
        animation: bounce 2s infinite;
    }

    .title {
        font-size: 3rem;
        font-weight: bold;
        margin-bottom: 1rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }

    .subtitle {
        font-size: 1.5rem;
        margin-bottom: 2rem;
        opacity: 0.9;
    }

    .description {
        font-size: 1.1rem;
        line-height: 1.6;
        margin-bottom: 2rem;
        opacity: 0.8;
    }

    .progress-container {
        background: rgba(255, 255, 255, 0.2);
        border-radius: 25px;
        padding: 4px;
        margin: 2rem 0;
        backdrop-filter: blur(10px);
    }

    .progress-bar {
        height: 20px;
        background: linear-gradient(90deg, #4CAF50, #45a049);
        border-radius: 20px;
        width: 0%;
        transition: width 0.3s ease;
        position: relative;
        overflow: hidden;
    }

        .progress-bar::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            animation: shimmer 2s infinite;
        }

    .progress-text {
        margin-top: 0.5rem;
        font-weight: bold;
    }

    .features-list {
        text-align: left;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 15px;
        padding: 1.5rem;
        margin: 2rem 0;
        backdrop-filter: blur(10px);
    }

        .features-list h3 {
            text-align: center;
            margin-bottom: 1rem;
            color: #fff;
        }

    .feature-item {
        display: flex;
        align-items: center;
        margin: 0.8rem 0;
        opacity: 0;
        animation: fadeInUp 0.6s ease forwards;
    }

        .feature-item:nth-child(2) {
            animation-delay: 0.1s;
        }

        .feature-item:nth-child(3) {
            animation-delay: 0.2s;
        }

        .feature-item:nth-child(4) {
            animation-delay: 0.3s;
        }

        .feature-item:nth-child(5) {
            animation-delay: 0.4s;
        }

        .feature-item:nth-child(6) {
            animation-delay: 0.5s;
        }

    .feature-icon {
        margin-right: 0.8rem;
        font-size: 1.2rem;
    }

    .back-button {
        background: rgba(255, 255, 255, 0.2);
        border: 2px solid rgba(255, 255, 255, 0.3);
        color: white;
        padding: 12px 24px;
        border-radius: 25px;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
        margin-top: 1rem;
        backdrop-filter: blur(10px);
    }

        .back-button:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            color: white;
            text-decoration: none;
        }

    .floating-shapes {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        z-index: 1;
    }

    .shape {
        position: absolute;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 50%;
        animation: float 6s ease-in-out infinite;
    }

        .shape:nth-child(1) {
            width: 80px;
            height: 80px;
            top: 20%;
            left: 10%;
            animation-delay: 0s;
        }

        .shape:nth-child(2) {
            width: 120px;
            height: 120px;
            top: 60%;
            right: 10%;
            animation-delay: 2s;
        }

        .shape:nth-child(3) {
            width: 60px;
            height: 60px;
            bottom: 20%;
            left: 20%;
            animation-delay: 4s;
        }

    /* Animaciones CSS - Escapadas para Razor */
    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100% {
            transform: translateY(0);
        }

        40% {
            transform: translateY(-20px);
        }

        60% {
            transform: translateY(-10px);
        }
    }

    @@keyframes shimmer {
        0% {
            transform: translateX(-100%);
        }

        100% {
            transform: translateX(100%);
        }
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes float {
        0%, 100% {
            transform: translateY(0px) rotate(0deg);
        }

        50% {
            transform: translateY(-20px) rotate(180deg);
        }
    }

    /* Media queries - Escapadas para Razor */
    @@media (max-width: 768px) {
        .title {
            font-size: 2rem;
        }

        .subtitle {
            font-size: 1.2rem;
        }

        .container {
            padding: 1rem;
        }

        .construction-icon {
            font-size: 3rem;
        }
    }
</style>

<div class="config-body">
    <div class="floating-shapes">
        <div class="shape"></div>
        <div class="shape"></div>
        <div class="shape"></div>
    </div>

    <div class="container">
        <div class="construction-icon">🚧</div>
        <h1 class="title">En Construcción</h1>
        <h2 class="subtitle">Vista para ver las Relaciones</h2>
        <p class="description">
            Estamos trabajando arduamente para traerte una experiencia increíble.
            Esta sección estará disponible muy pronto con todas las herramientas que necesitas.
        </p>

        <div class="progress-container">
            <div class="progress-bar" id="progressBar"></div>
        </div>
        <div class="progress-text">
            Progreso: <span id="progressText">0%</span>
        </div>

        <div class="features-list">
            <h3>🔧 Próximas Características</h3>
            <div class="feature-item">
                <span class="feature-icon">⚙️</span>
                <span>Vista para ver las relaciones entre Roles y Permisos</span>
            </div>
        </div>

        @Html.ActionLink("← Volver al Dashboard", "Dashboard", "Dashboard", null, new { @class = "back-button" })
    </div>
</div>

@section Scripts {
    <script>
        // Animación de la barra de progreso
        function animateProgress() {
            const progressBar = document.getElementById('progressBar');
            const progressText = document.getElementById('progressText');
            let progress = 0;
            const targetProgress = 90; // Simular 90% de progreso

            const interval = setInterval(() => {
                if (progress < targetProgress) {
                    progress += 1;
                    progressBar.style.width = progress + '%';
                    progressText.textContent = progress + '%';
                } else {
                    clearInterval(interval);
                }
            }, 50);
        }

        // Función para crear partículas flotantes adicionales
        function createFloatingParticles() {
            const container = document.querySelector('.floating-shapes');

            for (let i = 0; i < 5; i++) {
                setTimeout(() => {
                    const particle = document.createElement('div');
                    particle.className = 'shape';
                    particle.style.width = Math.random() * 40 + 20 + 'px';
                    particle.style.height = particle.style.width;
                    particle.style.left = Math.random() * 100 + '%';
                    particle.style.top = Math.random() * 100 + '%';
                    particle.style.animationDuration = (Math.random() * 4 + 4) + 's';
                    particle.style.animationDelay = Math.random() * 2 + 's';

                    container.appendChild(particle);

                    // Remover la partícula después de un tiempo
                    setTimeout(() => {
                        if (particle.parentNode) {
                            particle.parentNode.removeChild(particle);
                        }
                    }, 8000);
                }, i * 1000);
            }
        }

        // Inicializar animaciones cuando la página carga
        document.addEventListener('DOMContentLoaded', function() {
            // Animar la barra de progreso después de un pequeño delay
            setTimeout(animateProgress, 1000);

            // Crear partículas flotantes periódicamente
            createFloatingParticles();
            setInterval(createFloatingParticles, 10000);

            // Agregar efecto de hover a los elementos de características
            const featureItems = document.querySelectorAll('.feature-item');
            featureItems.forEach(item => {
                item.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateX(10px)';
                    this.style.transition = 'transform 0.3s ease';
                });

                item.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateX(0)';
                });
            });
        });

        // Agregar efecto de paralaje suave al mover el mouse
        document.addEventListener('mousemove', function(e) {
            const shapes = document.querySelectorAll('.shape');
            const mouseX = e.clientX / window.innerWidth;
            const mouseY = e.clientY / window.innerHeight;

            shapes.forEach((shape, index) => {
                const speed = (index + 1) * 0.5;
                const x = (mouseX - 0.5) * speed;
                const y = (mouseY - 0.5) * speed;

                shape.style.transform += ` translate(${x}px, ${y}px)`;
            });
        });
    </script>
}