@model _Evaluacion_Mensual_Abril.Models.ProductsViewModel
@{
    ViewData["Title"] = "Create Product Page";
}

<div class="container login-container animation-global">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="login-card p-5">

                <h4 class="title-products">Agregar Producto</h4>

                <div class="card-body">
                    <form id="formAgregarProducto" asp-action="CreateProduct" asp-controller="Products" method="post">

                        <div class="mb-3">
                            <label for="Codigo" class="form-label">Código (Solo enteros):</label>
                            <input type="number"
                                   id="Codigo"
                                   name="Codigo"
                                   class="form-control"
                                   required
                                   min="1"
                                   step="1" />
                        </div>

                        <div class="mb-3">
                            <label for="Nombre" class="form-label">Nombre del Producto:</label>
                            <input type="text"
                                   id="Nombre"
                                   name="Nombre"
                                   class="form-control"
                                   required
                                   minlength="3"
                                   maxlength="100" />
                        </div>

                        <div class="mb-3">
                            <label for="Descripcion" class="form-label">Descripción:</label>
                            <textarea id="Descripcion"
                                      name="Descripcion"
                                      class="form-control"
                                      maxlength="500"
                                      rows="3"
                                      style="resize: none;"></textarea>
                        </div>

                        <div class="mb-3">
                            <label for="Precio" class="form-label">Precio:</label>
                            <input type="number"
                                   id="Precio"
                                   name="Precio"
                                   class="form-control"
                                   required
                                   min="0.01"
                                   step="0.01" />
                        </div>

                        <div class="mb-3">
                            <label for="Categoria" class="form-label">Categoría:</label>
                            <input type="text"
                                   id="Categoria"
                                   name="Categoria"
                                   class="form-control"
                                   required
                                   maxlength="50" />
                        </div>

                        <div class="mb-3">
                            <label for="Stock" class="form-label">Stock:</label>
                            <input type="number"
                                   id="Stock"
                                   name="Stock"
                                   class="form-control"
                                   required
                                   min="0"
                                   step="1" />
                        </div>

                        <div class="mb-3">
                            <label for="Proveedor" class="form-label">Proveedor:</label>
                            <input type="text"
                                   id="Proveedor"
                                   name="Proveedor"
                                   class="form-control"
                                   required
                                   minlength="3"
                                   maxlength="100" />
                        </div>

                        <div class="mb-3">
                            <label for="FechaIngreso" class="form-label">Fecha de Ingreso:</label>
                            <input type="date"
                                   id="FechaIngreso"
                                   name="FechaIngreso"
                                   class="form-control"
                                   required
                                   max="@DateTime.Today.ToString("yyyy-MM-dd")" />
                        </div>

                        <button type="button"
                                class="btn btn-primary w-100 mb-2"
                                id="btnAgregar">
                            Agregar
                        </button>

                        <button type="button"
                                class="btn btn-danger w-100"
                                onclick="redireccionarProductos()">
                            Volver
                        </button>

                    </form>
                </div>

            </div>
        </div>
    </div>
</div>


<script src="~/js/sweetAlerts.js" asp-append-version="true"></script>
<script>

      document.getElementById('btnAgregar').addEventListener('click', function() {
      const form = document.getElementById('formAgregarProducto');

      // Utilizamos el Constraint Validation API
      if (!form.checkValidity()) {
        // Encuentra el primer campo inválido
        const firstInvalid = form.querySelector(':invalid');
        const label = form.querySelector(`label[for="${firstInvalid.id}"]`).innerText;
        let msg;
        // Mensaje por tipo de campo
        switch (firstInvalid.id) {
          case 'Codigo':
            msg = 'El código debe ser un entero positivo.';
            break;
          case 'Nombre':
            msg = 'El nombre requiere entre 3 y 100 caracteres.';
            break;
          case 'Descripcion':
            msg = 'La descripción no puede exceder 500 caracteres.';
            break;
          case 'Precio':
            msg = 'El precio debe ser mayor a 0.00';
            break;
          case 'Categoria':
            msg = 'La categoría no puede exceder 50 caracteres.';
            break;
          case 'Stock':
            msg = 'El stock debe ser un número entero positivo.';
            break;
          case 'Proveedor':
            msg = 'El proveedor requiere entre 3 y 100 caracteres.';
            break;
          case 'FechaIngreso':
            msg = 'La fecha no puede ser futura.';
            break;
          default:
            msg = firstInvalid.validationMessage;
        }
        Swal.fire({
          icon: 'error',
          title: 'Campo inválido',
          text: `${label}: ${msg}`
        });
        return;
      }

      // Si pasa la validación, llamamos al SweetAlert de acción
      mostrarAlertaExitoAgregar();
    });

    function mostrarAlertaExitoAgregar() {
         Swal.fire({
             title: '¿Qué deseas hacer?',
             text: "Selecciona una opción para continuar.",
             icon: 'question',
             showCancelButton: true,
             showDenyButton: true,
             confirmButtonText: 'Aceptar',
             denyButtonText: 'Agregar nuevamente',
             cancelButtonText: 'Cancelar',
             customClass: {
                 confirmButton: 'btn-confirm',
                 denyButton: 'btn-deny',
                 cancelButton: 'btn-cancel'
             },
             buttonsStyling: false
         }).then((result) => {
             if (result.isConfirmed) {
                 // Enviar el formulario
                 document.getElementById('formAgregarProducto').submit();
             } else if (result.isDenied) {
                 // Limpiar el formulario
                 document.getElementById('formAgregarProducto').reset();
             } else if (result.dismiss === Swal.DismissReason.cancel) {
                 // Cancelado: no hacer nada o limpiar si querés
                 document.getElementById('formAgregarProducto').reset();
             }
         });
     }

     function redireccionarProductos(){
             window.location.href = '/Products/Products';
     }

      var sesionActiva = sessionStorage.getItem('sesionActiva');

      if (!sesionActiva || sesionActiva !== 'true') {
          // Borrar sesión en el servidor
          window.location.href =  '@Url.Action("Login", "Login")';
      }

      var nombreSesion = '@(Context.Session.GetString("UsrNombre"))';

      if (!nombreSesion || nombreSesion === '' || nombreSesion === 'null' || nombreSesion === 'undefined') {
          window.location.href = '@Url.Action("Login", "Login")';
      }

</script>
