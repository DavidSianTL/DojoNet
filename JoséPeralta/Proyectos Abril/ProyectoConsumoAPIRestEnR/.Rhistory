data <- fromJSON(content)
# 2. Cargar las bibliotecas
library(shiny)
library(httr)
library(jsonlite)
library(dplyr)
library(ggplot2)
# 3. Configurar la URL base de la API
base_url <- "https://dummyjson.com"
# 4. Función para obtener datos de la API
get_data_from_api <- function(endpoint) {
url <- paste0(base_url, endpoint)
response <- GET(url)
# Verificar si la respuesta fue exitosa (código 200)
if (status_code(response) == 200) {
# Convertir el contenido JSON a un objeto R
content <- content(response, "text")
data <- fromJSON(content)
return(data)
} else {
warning(paste("Error en la solicitud:", status_code(response)))
return(NULL)
}
}
# 5.1. Obtener lista de productos
get_products <- function(limit = 10, skip = 0) {
endpoint <- paste0("/products?limit=", limit, "&skip=", skip)
return(get_data_from_api(endpoint))
}
# 5.2. Obtener un producto específico por ID
get_product_by_id <- function(id) {
endpoint <- paste0("/products/", id)
return(get_data_from_api(endpoint))
}
# 5.3. Obtener todos los usuarios
get_users <- function(limit = 10) {
endpoint <- paste0("/users?limit=", limit)
return(get_data_from_api(endpoint))
}
# 5.4. Buscar productos
search_products <- function(query) {
endpoint <- paste0("/products/search?q=", query)
return(get_data_from_api(endpoint))
}
# 6.1. Obtener 20 productos
products_data <- get_products(limit = 20)
products_df <- products_data$products
# Ver estructura de datos
str(products_df)
# Mostrar resumen de productos
summary(products_df$price)
# 6.2. Visualizar datos de productos
# Graficar los 10 productos más caros
top_products <- products_df %>%
arrange(desc(price)) %>%
head(10)
ggplot(top_products, aes(x = reorder(title, price), y = price)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(title = "10 productos más caros",
x = "Producto",
y = "Precio ($)") +
theme_minimal()
# 6.3. Obtener detalles de un producto específico
iphone_details <- get_product_by_id(1)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
